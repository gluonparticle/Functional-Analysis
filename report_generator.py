# report_generator.py
import os
from datetime import datetime

HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Deep Learning Algorithm Analysis Report</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background-color: #f4f4f4; color: #333; }}
        .container {{ background-color: #fff; padding: 20px; border-radius: 8px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }}
        h1 {{ color: #333; border-bottom: 2px solid #4CAF50; padding-bottom: 10px; }}
        h2 {{ color: #4CAF50; margin-top: 30px; }}
        .experiment-params {{ background-color: #e9e9e9; padding: 15px; border-radius: 5px; margin-bottom: 20px; }}
        .experiment-params p {{ margin: 5px 0; }}
        .features-list {{ list-style-type: none; padding-left: 0; columns: 2; -webkit-columns: 2; -moz-columns: 2;}}
        .features-list li {{ background-color: #f0f0f0; margin: 2px; padding: 3px 6px; border-radius: 3px; display: inline-block; }}
        .grid-container {{ display: grid; grid-template-columns: repeat(auto-fit, minmax(450px, 1fr)); gap: 20px; }}
        .model-card {{ border: 1px solid #ddd; border-radius: 5px; padding: 15px; background-color: #f9f9f9; }}
        .model-card h3 {{ margin-top: 0; color: #555; }}
        .metrics-table {{ width: 100%; border-collapse: collapse; margin-bottom: 15px; }}
        .metrics-table th, .metrics-table td {{ border: 1px solid #ddd; padding: 8px; text-align: left; font-size: 0.9em; }}
        .metrics-table th {{ background-color: #e9e9e9; }}
        .plot-image {{ max-width: 100%; height: auto; border: 1px solid #ccc; margin-top: 10px; }}
        footer {{ text-align: center; margin-top: 30px; font-size: 0.9em; color: #777; }}
    </style>
</head>
<body>
    <div class="container">
        <h1>Functional Analysis Report</h1>
        <div class="experiment-params">
            <h2>Experiment Parameters</h2>
            <p><strong>Report Generated:</strong> {report_time}</p>
            <p><strong>Dataset Size (Train Fraction):</strong> {train_data_fraction_param}</p>
            <p><strong>MLP Epochs:</strong> {epochs_param}</p>
            <p><strong>MLP Activation:</strong> {activation_param}</p>
            <p><strong>Features Used in Models:</strong></p>
            <ul class="features-list">
                {selected_features_list_html}
            </ul>
        </div>

        <div class="grid-container">
            {model_cards_html}
        </div>
        
        <footer>
            Generated by Functional Analysis Script
        </footer>
    </div>
</body>
</html>
"""

MODEL_CARD_TEMPLATE = """
<div class="model-card">
    <h3>{model_name}</h3>
    <p><strong>Task Type:</strong> {task_type}</p>
    <h4>Metrics:</h4>
    <table class="metrics-table">
        <tr><th>Metric</th><th>Value</th></tr>
        {metrics_rows_html}
    </table>
    <h4>Plots:</h4>
    {plots_html}
</div>
"""

def generate_html_report(all_model_results, train_data_fraction, epochs, activation, 
                         selected_features_for_report, output_dir="reports", 
                         output_filename_override=None):
    """
    Generates an HTML report from the collected model results.
    Returns the full path to the generated report.
    """
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    report_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    if output_filename_override:
        # Ensure it's just a filename, not a path, and place it in output_dir
        filename = os.path.basename(output_filename_override)
    else:
        filename = f"analysis_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
    
    filepath = os.path.join(output_dir, filename)

    model_cards_html = ""
    for model_result in all_model_results:
        if not model_result: 
            continue
        
        error_message = model_result.get("error")
        metrics_rows_html = ""
        if error_message:
            metrics_rows_html = f"<tr><td colspan='2' style='color:red;'>Error: {error_message}</td></tr>"
        else:
            for metric, value in model_result.get("metrics", {}).items():
                metrics_rows_html += f"<tr><td>{metric}</td><td>{value}</td></tr>\n"

        plots_html = ""
        if not error_message: # Only show plots if no error
            for plot_name, base64_img in model_result.get("plots", {}).items():
                if base64_img:
                    plot_title = plot_name.replace("_", " ").title()
                    plots_html += f"<div><p><strong>{plot_title}:</strong></p><img src='data:image/png;base64,{base64_img}' alt='{plot_title}' class='plot-image'></div>\n"
                else:
                    plots_html += f"<div><p><strong>{plot_name.replace('_', ' ').title()}:</strong> Plot not available.</p></div>\n"
        
        model_cards_html += MODEL_CARD_TEMPLATE.format(
            model_name=model_result.get("model_name", "Unknown Model"),
            task_type=model_result.get("task_type", "N/A"),
            metrics_rows_html=metrics_rows_html,
            plots_html=plots_html
        )

    selected_features_list_html = ""
    if selected_features_for_report:
        for feature_name in selected_features_for_report:
            selected_features_list_html += f"<li>{feature_name}</li>\n"
    else:
        selected_features_list_html = "<li>None selected or error.</li>"

    full_html = HTML_TEMPLATE.format(
        report_time=report_time,
        train_data_fraction_param=f"{train_data_fraction*100:.0f}% of {50000} base samples", # Assuming TRAIN_BASE_SIZE is 50000
        epochs_param=epochs,
        activation_param=activation,
        selected_features_list_html=selected_features_list_html,
        model_cards_html=model_cards_html
    )

    try:
        with open(filepath, "w", encoding="utf-8") as f:
            f.write(full_html)
        abs_filepath = os.path.abspath(filepath)
        print(f"\nHTML report generated: {abs_filepath}")
        return abs_filepath # Return the path
    except IOError as e:
        print(f"Error writing HTML report: {e}")
        return None

if __name__ == '__main__':
    print("Report generator module loaded.")